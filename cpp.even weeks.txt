Week 2 - Scope Resolution & Namespace
 #include <iostream>
 using namespace std;
 // Global variable
 int num = 10;
 namespace SampleNamespace {
    int num = 20;
 }
 int main() {
    int num = 30;
    cout << "Local num: " << num << endl;                   // Local variable
    cout << "Global num: " << ::num << endl;                // Scope resolution
    cout << "Namespace num: " << SampleNamespace::num << endl; // Namespace variable
    return 0;
 }

 Week 2 - Inline Function
 #include <iostream>
 using namespace std;
 inline int square(int x) {
    return x * x;
 }
 int main() {
    cout << "Square of 5: " << square(5) << endl;
    return 0;
 }

 Week 4 - Function Overloading
#include <iostream>
using namespace std;

class AreaCalculator {
public:
    // Area of a square
    double area(double side) {
        return side * side;
    }

    // Area of a rectangle
    double area(double length, double width) {
        return length * width;
    }

    // Area of a circle
    double area(int radius) {
        return 3.14159 * radius * radius;
    }
};

int main() {
    AreaCalculator calc;

    cout << "Area of square: " << calc.area(5.0) << endl;
    cout << "Area of rectangle: " << calc.area(4.5, 3.2) << endl;
    cout << "Area of circle: " << calc.area(7) << endl;

    return 0;
}

Week 4 - Default Arguments

#include <iostream>
using namespace std;

class Discount {
public:
    // Function with default discount rate 10%
    double applyDiscount(double price, double discountRate = 0.10) {
        return price * (1 - discountRate);
    }
};

int main() {
    Discount d;

    cout << "Price after default discount (10%) on $100: $"
         << d.applyDiscount(100) << endl;

    cout << "Price after 20% discount on $100: $"
         << d.applyDiscount(100, 0.20) << endl;

    return 0;
}

 Week 4 - Friend Function

#include <iostream>
using namespace std;

class Animal {
private:
    string name;
    int age;

public:
    // Constructor
    Animal(string n, int a) : name(n), age(a) {}

    // Friend function declaration
    friend void displayAnimalInfo(const Animal &a);
};

// Friend function definition
void displayAnimalInfo(const Animal &a) {
    cout << "Animal Name: " << a.name << endl;
    cout << "Animal Age: " << a.age << endl;
}

int main() {
    Animal dog("Snoopy", 6);

    displayAnimalInfo(dog);

    return 0;
}


Week 6 - Operator Overloading (Member)

 #include <iostream>
 using namespace std;
 class Number {
    int value;
 public:
    Number(int v = 0) : value(v) {}
    // Unary operator
    Number operator-() {
        return Number(-value);
    }
    // Binary operator
    Number operator+(Number obj) {
        return Number(value + obj.value);
    }
    void display() { cout << value << endl; }
 };
 int main() {
    Number n1(10), n2(20);
    Number n3 = n1 + n2;
    n3.display();
    Number n4 = -n1;
    n4.display();
 }


 Week 6 - Operator Overloading (Friend)

 #include <iostream>
 using namespace std;
 class Number {
    int value;
 public:
    Number(int v = 0) : value(v) {}
    friend Number operator-(Number &obj);       
    friend Number operator+(Number &obj1, Number &obj2);
    void display() { cout << value << endl; }
 };
 Number operator-(Number &obj) {
    return Number(-obj.value);
 }
 Number operator+(Number &obj1, Number &obj2) {
    return Number(obj1.value + obj2.value);
 }
 int main() {
    Number n1(15), n2(25);
    Number n3 = n1 + n2;
    n3.display();
    Number n4 = -n1;
    n4.display();
 }


 Week 8 - Pointer to Object

#include <iostream>
using namespace std;

class Book {
    string title;
    int pages;

public:
    void setData(string t, int p) {
        title = t;
        pages = p;
    }

    void display() {
        cout << "Title: " << title << ", Pages: " << pages << endl;
    }
};

int main() {
    Book *ptr = new Book;

    ptr->setData("C++ Programming", 350);
    ptr->display();

    ptr->setData("Data Structures", 500);
    ptr->display();

    delete ptr;

    return 0;
}

Week 8 - Virtual Base Class

 #include <iostream>
 using namespace std;
 class A {
 public:
    int x;
 };
 class B : virtual public A {};
 class C : virtual public A {};
 class D : public B, public C {
 public:
    void setX(int val) { x = val; }
    void showX() { cout << "Value of x: " << x << endl; }
 };
 int main() {
    D obj;
    obj.setX(50);
    obj.showX();
    return 0;
 }

Week 10 - Function Template

#include <iostream>
using namespace std;

// Function template to find maximum
template <typename T>
T getMax(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    int x = 5, y = 10;
    cout << "Max of " << x << " and " << y << " is " << getMax(x, y) << endl;

    double a = 5.5, b = 2.3;
    cout << "Max of " << a << " and " << b << " is " << getMax(a, b) << endl;

    char c1 = 'A', c2 = 'Z';
    cout << "Max of " << c1 << " and " << c2 << " is " << getMax(c1, c2) << endl;

    return 0;
}

Week 10 - Class Template

#include <iostream>
#include <string>
using namespace std;

template <typename T>
class Box {
    T value;

public:
    // Constructor
    Box(T val) {
        value = val;
    }

    // Display function
    void show() {
        cout << "Box contains: " << value << endl;
    }

    // Getter function
    T getValue() {
        return value;
    }
};

int main() {
    Box<int> intBox(100);
    Box<float> floatBox(45.67);
    Box<string> stringBox("Hello, Lakshmi!");

    intBox.show();
    floatBox.show();
    stringBox.show();

    return 0;
}

 Week 12 - List & Vector

#include <iostream>
#include <list>
#include <vector>
using namespace std;

int main() {
    int arr1[] = {1, 2, 3};
    list<int> l(arr1, arr1 + 3);  // Initialize list using array range
    l.push_back(4);
    for(list<int>::iterator it = l.begin(); it != l.end(); ++it)
        cout << *it << " ";

    int arr2[] = {5, 6, 7};
    vector<int> v(arr2, arr2 + 3);  // Initialize vector using array range
    v.push_back(8);
    for(vector<int>::iterator it = v.begin(); it != v.end(); ++it)
        cout << *it << " ";

    return 0;
}

Week 12 - Deque

#include <iostream>
#include <deque>
using namespace std;

int main() {
    int arr[] = {1, 2, 3};
    deque<int> d(arr, arr + 3);  // Initialize deque using array range

    d.push_front(0);
    d.push_back(4);

    for(deque<int>::iterator it = d.begin(); it != d.end(); ++it)
        cout << *it << " ";

    return 0;
}

Week 12 - Map

#include <iostream>
#include <map>
#include <string>
using namespace std;

int main() {
    map<int, string> m;
    m[1] = "A";
    m[2] = "B";
    m.insert(pair<int, string>(3, "C"));
    m.erase(2);
    for(map<int, string>::iterator it = m.begin(); it != m.end(); ++it)
        cout << it->first << " " << it->second << " ";
    return 0;
}